
-- Table book
+---------+-----------------------+------------------+--------+--------+
| book_id | title                 | author           | price  | amount |
+---------+-----------------------+------------------+--------+--------+
| 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
| 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
| 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
| 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 3      |
| 5       | Игрок                 | Достоевский Ф.М. | 480.50 | 10     |
| 6       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
+---------+-----------------------+------------------+--------+--------+


--Вывести информацию о всех книгах, хранящихся на складе
select * 
from book;

--Выбрать авторов, название книг и их цену из таблицы book
select 
    author, 
    title, 
    price
from book;

--Выбрать названия книг и авторов из таблицы book, 
--для столбцов задать имя(псевдоним)
select 
    title as book_title, 
    author as author_name
from book;

--Для упаковки каждой книги требуется один лист бумаги, цена которого 1 рубль 65 копеек. 
--Посчитать стоимость упаковки для каждой книги (сколько денег потребуется, чтобы упаковать все экземпляры книги). 
--В запросе вывести название книги, ее количество и стоимость упаковки, последний столбец назвать pack. 
select 
    title, 
    amount, 
    amount * 1.65 as pack
from book;

-- В конце года цену всех книг на складе пересчитывают – снижают ее на 30%. 
-- Написать SQL запрос, который из таблицы book выбирает названия, авторов, количества и вычисляет новые цены книг. 
-- Столбец с новой ценой назвать new_price, цену округлить до 2-х знаков после запятой.
select 
    title, 
    author, 
    amount, 
    round((price * 0.7), 2) as new_price
from book;

-- При анализе продаж книг выяснилось, что наибольшей популярностью пользуются книги Михаила Булгакова, на втором месте книги Сергея Есенина. 
-- Исходя из этого решили поднять цену книг Булгакова на 10%, а цену книг Есенина - на 5%. 
-- Написать запрос, куда включить автора, название книги и новую цену, последний столбец назвать new_price. 
-- Значение округлить до двух знаков после запятой.
select 
    author,
    title,
    round (if (author = 'Булгаков М.А.', price * 1.1, if (author = 'Есенин С.А.', price * 1.05, price)), 2) as new_price
from book;

-- Вывести автора, название и цены тех книг, количество которых меньше 10.
select 
    author,
    title,
    price
from book
where amount < 10;

-- Вывести название, автора,  цену  и количество всех книг, цена которых меньше 500 или больше 600, 
-- а стоимость всех экземпляров этих книг больше или равна 5000.
select 
    title,
    author,
    price,
    amount
from book
where (price < 500 or price > 600) and price * amount >= 5000;

-- Вывести название и авторов тех книг, цены которых принадлежат интервалу от 540.50 до 800 (включая границы),  
-- а количество или 2, или 3, или 5, или 7.
select 
    title,
    author
from book
where (price between 540.50 and 800) and amount in (2, 3, 5, 7);

-- Вывести  автора и название  книг, количество которых принадлежит интервалу от 2 до 14 (включая границы). 
-- Информацию  отсортировать сначала по авторам (в обратном алфавитном порядке), а затем по названиям книг (по алфавиту).
select 
    author, 
    title
from book
where amount between 2 and 14
order by 1 desc, 2;

-- Вывести название и автора тех книг, название которых состоит из двух и более слов, а инициалы автора содержат букву «С». 
-- Информацию отсортировать по названию книги в алфавитном порядке.
select 
    title, 
    author
from book
where title like '%_ %' and (author like '% С.%' or author like '%.С.%')
order by 1;

-- Отобрать различные (уникальные) элементы столбца amount таблицы book.
select 
    distinct amount
from book;

-- Посчитать, количество различных книг и количество экземпляров книг каждого автора, хранящихся на складе. 
select 
    author, 
    count(title) as diff_books, 
    sum(amount) as sum_amount
from book
group by 1;

-- Вывести фамилию и инициалы автора, минимальную, максимальную и среднюю цену книг каждого автора. 
-- Вычисляемые столбцы назвать Минимальная_цена, Максимальная_цена и Средняя_цена соответственно.
select 
    author, 
    min(price) as min_price, 
    max(price) as max_price, 
    avg(price) as avg_price
from book
group by 1;

-- Для каждого автора вычислить суммарную стоимость книг,
-- а также вычислить налог на добавленную стоимость для полученных сумм (НДС), который включен в стоимость и составляет k = 18%,  
-- а также стоимость книг без НДС. Значения округлить до двух знаков после запятой.
select 
    author, 
    sum(price*amount) as sum_price, 
    round((sum(price*amount)/1.18)*0.18, 2) as tax, 
    round(sum(price*amount)/1.18, 2) as price_without_tax
from book
group by 1;

-- Вывести  цену самой дешевой книги, цену самой дорогой и среднюю цену уникальных книг на складе. 
-- Названия столбцов Минимальная_цена, Максимальная_цена, Средняя_цена соответственно. Среднюю цену округлить до двух знаков после запятой.
select
    min(price) as min_price,
    max(price) as max_price,
    round(avg(price), 2) as avg_price
from book;

-- Вычислить среднюю цену и суммарную стоимость тех книг, количество экземпляров которых принадлежит интервалу от 5 до 14, включительно. 
-- значения округлить до 2-х знаков после запятой.
select
    round(avg(price), 2) as avg_price,
    round(sum(price*amount), 2) as sum_price
from book
where amount between 5 and 14;

-- Посчитать стоимость всех экземпляров каждого автора без учета книг «Идиот» и «Белая гвардия». 
-- В результат включить только тех авторов, у которых суммарная стоимость книг (без учета книг «Идиот» и «Белая гвардия») более 5000 руб. 
select
    author,
    sum(price*amount) as sum_price
from book
where title <> 'Идиот' and title <> 'Белая гвардия'
group by author
having sum(price*amount) > 5000
order by 2 desc;


-- Table trip
+---------+---------------+-----------------+----------+------------+------------+
| trip_id | name          | city            | per_diem | date_first | date_last  |
+---------+---------------+-----------------+----------+------------+------------+
| 1       | Баранов П.Е.  | Москва          | 700.00   | 2020-01-12 | 2020-01-17 |
| 2       | Абрамова К.А. | Владивосток     | 450.00   | 2020-01-14 | 2020-01-27 |
| 3       | Семенов И.В.  | Москва          | 700.00   | 2020-01-23 | 2020-01-31 |
| 4       | Ильиных Г.Р.  | Владивосток     | 450.00   | 2020-01-12 | 2020-02-02 |
| 5       | Колесов С.П.  | Москва          | 700.00   | 2020-02-01 | 2020-02-06 |
| 6       | Баранов П.Е.  | Москва          | 700.00   | 2020-02-14 | 2020-02-22 |
                          ...
| 19      | Абрамова К.А. | Владивосток     | 450.00   | 2020-07-02 | 2020-07-13 |
| 20      | Баранов П.Е.  | Воронеж         | 450.00   | 2020-07-19 | 2020-07-25 |
+---------+---------------+-----------------+----------+------------+------------+

-- Вывести из таблицы trip информацию о командировках тех сотрудников, фамилия которых заканчивается на букву «а», 
select
    name,
    city,
    per_diem,
    date_first,
    date_last
from trip
where name like '%а %'
order by date_last desc;

-- Вывести в алфавитном порядке фамилии и инициалы тех сотрудников, которые были в командировке в Москве.
select distinct name 
from trip
where city = 'Москва'
order by name;

-- Для каждого города посчитать, сколько раз сотрудники в нем были.
select
    city,
    count(city) as count
from trip
group by city
order by city;

-- Вывести два города, в которых чаще всего были в командировках сотрудники.
select
    city,
    count(city) as count
from trip
group by city
order by count(city) desc
limit 2;

-- Вывести информацию о командировках во все города кроме Москвы и Санкт-Петербурга (при этом первый и последний день относится к периоду командировки).
-- Информацию вывести в упорядоченном по убыванию длительности поездки, а потом по убыванию названий городов (в обратном алфавитном порядке).
select
    name,
    city,
    datediff(date_last, date_first) + 1 as duration
from trip
where city not in ('Москва', 'Санкт-Петербург')
order by duration desc, city desc;

-- Вывести информацию о командировках, начало и конец которых относятся к одному месяцу (год может быть любой). 
-- Строки отсортировать сначала в алфавитном порядке по названию города, а затем по фамилии сотрудника.
select
    name,
    city,
    date_first,
    date_last
from trip
where month(date_first) = month(date_last)
order by city, name;

-- Вывести название месяца и количество командировок для каждого месяца. 
-- Считаем, что командировка относится к некоторому месяцу, если она началась в этом месяце. 
-- Информацию вывести сначала в отсортированном по убыванию количества, а потом в алфавитном порядке по названию месяца виде.
select
    monthname(date_first) as month,
    count(*) as count
from trip
group by 1
order by 2 desc, 1;

-- Вывести сумму суточных (произведение количества дней командировки и размера суточных) для командировок, первый день которых пришелся на февраль или март 2020 года.
-- Информацию отсортировать сначала в алфавитном порядке по фамилиям сотрудников, а затем по убыванию суммы суточных.
select
    name,
    city,
    date_first,
    (datediff(date_last, date_first) + 1) * per_diem as sum_pd
from trip
where (month(date_first) = 2 or month(date_first) = 3) and year(date_first) = 2020
order by name, sum_pd desc;

-- Вывести фамилию с инициалами и общую сумму суточных, полученных за все командировки для тех сотрудников, 
-- которые были в командировках больше чем 3 раза. 
select
    name,
    sum((datediff(date_last, date_first) + 1) * per_diem) as sum_pd
from trip
group by name
having count(name) > 3
order by 2 desc;


-- Table fine
+---------------+--------+------------------------------+----------+----------------+--------------+
| name          | number | violation                    | sum_fine | date_violation | date_payment |
|               | _plate |                              |          |                |              |
+---------------+--------+------------------------------+----------+----------------+--------------+
| Баранов П.Е.  | Р523ВТ | Превышение скорости(от 40... | 500.00   | 2020-01-12     | 2020-01-17   |
| Абрамова К.А. | О111АВ | Проезд на запрещающий сигнал | 1000.00  | 2020-01-14     | 2020-02-27   |
| Яковлев Г.Р.  | Т330ТТ | Превышение скорости(от 20... | 500.00   | 2020-01-23     | 2020-02-23   |
| Яковлев Г.Р.  | М701АА | Превышение скорости(от 20... | 500.00   | 2020-01-12     | NULL         |
| Колесов С.П.  | К892АХ | Превышение скорости(от 20... | 500.00   | 2020-02-01     | NULL         |
| Баранов П.Е.  | Р523ВТ | Превышение скорости(от 40... | 2000.00  | 2020-02-14     | NULL         |
| Абрамова К.А. | О111АВ | Проезд на запрещающий сигн...| 2000.00  | 2020-02-23     | NULL         |
| Яковлев Г.Р.  | Т330ТТ | Проезд на запрещающий сигн...| 1000.00  | 2020-03-03     | NULL         |
+---------------+--------+------------------------------+----------+----------------+--------------+


-- Вывести фамилию, номер машины и нарушение только для тех водителей, которые на одной машине нарушили одно и то же правило два и более раз. 
-- При этом учитывать все нарушения, независимо от того оплачены они или нет. 
-- Информацию отсортировать в алфавитном порядке, сначала по фамилии водителя, потом по номеру машины и, наконец, по нарушению.

select
    name,
    number_plate,
    violation
from fine
group by 1, 2, 3
having count(*) >= 2;