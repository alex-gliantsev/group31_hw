{
	"info": {
		"_postman_id": "55b5e05a-a123-43a1-a974-305b30048c7a",
		"name": "Ksendzov_hw_2",
		"description": "StartFragment\n\n**http://162.55.220.72:5005/first**\n\n1\\. Отправить запрос.\n\n2\\. Статус код 200\n\n3\\. Проверить, что в body приходит правильный string.\n\n**http://162.55.220.72:5005/user_info_3**\n\n1\\. Отправить запрос.\n\n2\\. Статус код 200\n\n3\\. Спарсить response body в json.\n\n4\\. Проверить, что name в ответе равно name s request (name вбить руками.)\n\n5\\. Проверить, что age в ответе равно age s request (age вбить руками.)\n\n6\\. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\n\n7\\. Спарсить request.\n\n8\\. Проверить, что name в ответе равно name s request (name забрать из request.)\n\n9\\. Проверить, что age в ответе равно age s request (age забрать из request.)\n\n10\\. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\n\n11\\. Вывести в консоль параметр family из response.\n\n12\\. Проверить что u_salary_1_5_year в ответе равно salary\\*4 (salary забрать из request)\n\n**http://162.55.220.72:5005/object_info_3**\n\n1\\. Отправить запрос.\n\n2\\. Статус код 200\n\n3\\. Спарсить response body в json.\n\n4\\. Спарсить request.\n\n5\\. Проверить, что name в ответе равно name s request (name забрать из request.)\n\n6\\. Проверить, что age в ответе равно age s request (age забрать из request.)\n\n7\\. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\n\n8\\. Вывести в консоль параметр family из response.\n\n9\\. Проверить, что у параметра dog есть параметры name.\n\n10\\. Проверить, что у параметра dog есть параметры age.\n\n11\\. Проверить, что параметр name имеет значение Luky.\n\n12\\. Проверить, что параметр age имеет значение 4.\n\n**http://162.55.220.72:5005/object_info_4**\n\n1\\. Отправить запрос.\n\n2\\. Статус код 200\n\n3\\. Спарсить response body в json.\n\n4\\. Спарсить request.\n\n5\\. Проверить, что name в ответе равно name s request (name забрать из request.)\n\n6\\. Проверить, что age в ответе равно age из request (age забрать из request.)\n\n7\\. Вывести в консоль параметр salary из request.\n\n8\\. Вывести в консоль параметр salary из response.\n\n9\\. Вывести в консоль 0-й элемент параметра salary из response.\n\n10\\. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\n\n11\\. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\n\n12\\. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\n\n13\\. Проверить, что 1-й элемент параметра salary равен salary\\*2 из request (salary забрать из request.)\n\n14\\. Проверить, что 2-й элемент параметра salary равен salary\\*3 из request (salary забрать из request.)\n\n15\\. Создать в окружении переменную name\n\n16\\. Создать в окружении переменную age\n\n17\\. Создать в окружении переменную salary\n\n18\\. Передать в окружение переменную name\n\n19\\. Передать в окружение переменную age\n\n20\\. Передать в окружение переменную salary\n\n21\\. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\n\n**http://162.55.220.72:5005/user_info_2**\n\n1\\. Вставить параметр salary из окружения в request\n\n2\\. Вставить параметр age из окружения в age\n\n3\\. Вставить параметр name из окружения в name\n\n4\\. Отправить запрос.\n\n5\\. Статус код 200\n\n6\\. Спарсить response body в json.\n\n7\\. Спарсить request.\n\n8\\. Проверить, что json response имеет параметр start_qa_salary\n\n9\\. Проверить, что json response имеет параметр qa_salary_after_6_months\n\n10\\. Проверить, что json response имеет параметр qa_salary_after_12_months\n\n11\\. Проверить, что json response имеет параметр qa_salary_after_1.5_year\n\n12\\. Проверить, что json response имеет параметр qa_salary_after_3.5_years\n\n13\\. Проверить, что json response имеет параметр person\n\n14\\. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\n\n15\\. Проверить, что параметр qa_salary_after_6_months равен salary\\*2 из request (salary забрать из request.)\n\n16\\. Проверить, что параметр qa_salary_after_12_months равен salary\\*2.7 из request (salary забрать из request.)\n\n17\\. Проверить, что параметр qa_salary_after_1.5_year равен salary\\*3.3 из request (salary забрать из request.)\n\n18\\. Проверить, что параметр qa_salary_after_3.5_years равен salary\\*3.8 из request (salary забрать из request.)\n\n19\\. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\n\n20\\. Проверить, что что параметр u_age равен age из request (age забрать из request.)\n\n21\\. Проверить, что параметр u_salary_5_years равен salary\\*4.2 из request (salary забрать из request.)\n\n22\\. **\\*Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\n\n  \n\nEndFragm",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18246794"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct string value in body\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let req = request.data;\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = +req.salary;\r",
							"\r",
							"pm.test(\"Name check\", function () {\r",
							"    pm.expect(resp.name).to.eql(\"Andrew\");\r",
							"});\r",
							"\r",
							"pm.test(\"Age check\", function () {\r",
							"    pm.expect(resp.age).to.eql(\"35\");\r",
							"});\r",
							"\r",
							"pm.test(\"Salary check\", function () {\r",
							"    pm.expect(resp.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Name check from request\", function () {\r",
							"    pm.expect(resp.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"pm.test(\"Age check from request\", function () {\r",
							"    pm.expect(resp.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary check from request\", function () {\r",
							"    pm.expect(resp.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"console.log(resp.family);\r",
							"\r",
							"pm.test(\"Salary 1_5 check from request\", function () {\r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(req_salary*4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrew",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"pm.test(\"Name check from request\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"pm.test(\"Age check from request\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary check from request\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"console.log(resp.family);\r",
							"\r",
							"pm.test(\"Name property check\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"pm.test(\"Age property check\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"pm.test(\"Name value check\", function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"pm.test(\"Age value check\", function () {\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Roman&age=32&salary=10000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Roman"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"pm.test(\"Name check from request\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"pm.test(\"Age check from request\", function () {\r",
							"    pm.expect(resp.age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"console.log(\"request salary = \"+ req.salary);\r",
							"console.log(\"response salary = \"+ resp.salary);\r",
							"console.log(\"response salary = \"+ resp.salary[0]);\r",
							"console.log(\"response salary = \"+ resp.salary[1]);\r",
							"console.log(\"response salary = \"+ resp.salary[2]);\r",
							"\r",
							"pm.test(\"Salary check from request\", function () {\r",
							"    pm.expect(resp.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary check from request\", function () {\r",
							"    pm.expect(+resp.salary[1]).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary check from request\", function () {\r",
							"    pm.expect(+resp.salary[2]).to.eql(req.salary*3);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"name\", resp.name);\r",
							"pm.environment.set(\"age\", resp.age);\r",
							"pm.environment.set(\"salary\", resp.salary[0]);\r",
							"\r",
							"// 1-й вариант\r",
							"for (let i = 0; i < resp.salary.length; i++) {\r",
							"    console.log(resp.salary[i]);\r",
							"};\r",
							"\r",
							"// 2-й вариант\r",
							"for (item in resp.salary) {\r",
							"    console.log(resp.salary[item]);\r",
							"};\r",
							"\r",
							"// 3-й вариант\r",
							"for (let i in resp.salary) {\r",
							"    console.log(resp.salary[i]);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Rudolf&age=36&salary=3000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Rudolf"
						},
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let req = request.data;\r",
							"\r",
							"pm.test(\"start_qa_salary check\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months check\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months check\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year check\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years check\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"pm.test(\"person check\", function () {\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"pm.test(\"Start salary check from request\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Start salary check from request\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"6 months salary check from request\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"12 months salary check from request\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(+req.salary*2.7);\r",
							"});\r",
							"\r",
							"pm.test(\"1.5 years salary check from request\", function () {\r",
							"    pm.expect(resp['qa_salary_after_1.5_year']).to.eql(+req.salary*3.3);\r",
							"});\r",
							"\r",
							"pm.test(\"3.5 years salary check from request\", function () {\r",
							"    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(+req.salary*3.8);\r",
							"});\r",
							"\r",
							"pm.test(\"Person salary check from request\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Person age check from request\", function () {\r",
							"    pm.expect(resp.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"pm.test(\"Person salary 5 years check from request\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(+req.salary*4.2);\r",
							"});\r",
							"\r",
							"for (key in resp.person) {\r",
							"    console.log(key, resp.person[key]);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}